generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
}

model Tenant {
  id        String     @id @default(cuid())
  name      String
  domain    String?    @unique
  createdAt DateTime   @default(now())
  users     User[]
  documents Document[]
  queryLogs QueryLog[]
}

model Document {
  id             String   @id @default(cuid())
  title          String
  filename       String
  size           Int?
  mimeType       String?
  storageKey     String // Supabase storage path
  url            String? // Public URL
  status         String   @default("pending") // pending, processing, processed, error
  userId         String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant Tenant? @relation(fields: [organizationId], references: [id])
  chunks Chunk[]

  // Add any other fields you need
  @@map("documents")
}

model Chunk {
  id         String     @id @default(cuid())
  documentId String
  document   Document   @relation(fields: [documentId], references: [id])
  text       String     @db.Text
  chunkIndex Int
  metadata   Json?
  embedding  Embedding?
}

model Embedding {
  id         String                      @id @default(cuid())
  chunkId    String                      @unique
  chunk      Chunk                       @relation(fields: [chunkId], references: [id])
  vector     Bytes? // legacy
  vector_vec Unsupported("vector(384)")? // MiniLM-L6-v2 dims
  createdAt  DateTime                    @default(now())
}

model QueryLog {
  id         String   @id @default(cuid())
  tenantId   String
  tenant     Tenant   @relation(fields: [tenantId], references: [id])
  userId     String?
  question   String   @db.Text
  response   String   @db.Text
  citations  Json?
  confidence Float?
  createdAt  DateTime @default(now())
}

model Post {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  createdById String?

  @@index([createdById, createdAt])
}
